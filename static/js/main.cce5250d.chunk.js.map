{"version":3,"sources":["App.tsx","components/Good/Good.tsx","index.tsx"],"names":["SortType","Good","good","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","canReset","className","type","classNames","onClick","reversed","map","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0ECbQC,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAC7B,oBAAI,UAAQ,OAAZ,SACGA,KDFQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGH,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAMI,EAAM,WACjB,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASL,EAASQ,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAgCA,IAAMC,EAnBN,SAA2BC,GACzB,IAAMD,EAAY,YAAOC,GAezB,OAbAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAKT,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAINb,EAAaK,EAAaS,UAAYT,EAG1BU,CACnBlB,GAGImB,EAAWb,IAAaT,EAASQ,MAAQF,EAE/C,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYhB,IAAaT,EAASgB,WAEtCU,QA9CmB,kBAAMhB,EAAYV,EAASgB,WAuChD,iCAYA,wBACEQ,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYhB,IAAaT,EAASkB,SAEtCQ,QAxDiB,kBAAMhB,EAAYV,EAASkB,SAiD9C,4BAYA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAanB,IAEjBoB,QAlEc,kBAAMnB,GAAc,SAAAoB,GAAQ,OAAKA,MA2DjD,qBAaEL,GACE,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA1EQ,WAClBhB,EAAYV,EAASQ,MACrBD,GAAc,IAqEN,sBAWN,6BACGI,EAAaiB,KAAI,SAAA1B,GAAI,OACpB,cAAC,EAAD,CAAMA,KAAMA,GAAWA,YEpHjC2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cce5250d.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { Good } from './components/Good/Good';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleAlphabetSort = () => setSortType(SortType.ALPHABET);\n\n  const handleLengthSort = () => setSortType(SortType.LENGTH);\n\n  const handleReverse = () => setIsReversed(reversed => !reversed);\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  function getReorderedGoods(goods: string[]) {\n    const visibleGoods = [...goods];\n\n    visibleGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n\n    return isReversed ? visibleGoods.reverse() : visibleGoods;\n  }\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n  );\n\n  const canReset = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={handleAlphabetSort}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={handleLengthSort}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {\n          canReset && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleReset}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <Good good={good} key={good} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  good: string;\n};\n\nexport const Good: FC<Props> = ({ good }) => (\n  <li data-cy=\"Good\">\n    {good}\n  </li>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}